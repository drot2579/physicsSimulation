    canvasCollision2() {
        if (this.position.x <= 0) { this.position.x = 0; this.bounceX(); }
        if (this.position.y <= 0) { this.position.y = 0; this.bounceY(); }
        if (this.position.x + this.size.x > canvas.width) {
            this.position.x = canvas.width - this.size.x; this.bounceX();
        }
        if (this.position.y + this.size.y > canvas.height) {
            this.position.y = canvas.height - this.size.y; this.bounceY();
        }
    }


.vectorTable {
    color: hsl(180, 100%, 50%);
    z-index: 1;
}

.vectorTable .position {
    opacity: 1;
    position: absolute;
    bottom: 0;
    left: 500px;
}
.vectorTable .totalForce {
    opacity: 1;
    position: absolute;
    top: 0;
    left: 500px;
}
.vectorTable .acclrtn {
    opacity: 1;
    position: absolute;
    top: 2rem;
    left: 500px;
}
.vectorTable .velocity {
    opacity: 1;
    position: absolute;
    top: 200px;
    left: 500px;
}

.vectorTable  {
    height: 1.5rem;
    text-align: center;
    border: dotted 1px #444;
}

.vector {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}

.arrowValue  {
    display: flex;
    align-items: center;
    justify-content: center;
}
.vectorTable .num {
    width: 3rem;
}
.vectorTable .name {
    width: 6rem;
}
.vectorTable .vectorX {
    width: 5rem;
}
.vectorTable .vectorY {
    width: 5rem;
}
.arrowY {
    rotate:  -90deg;
    &.otherDirection {
        rotate: -270deg;
    }
}
.arrowY , .arrowX {
    font-size: 1.5rem;
}
.positive {
    color: #0f0;
}
.negative {
    color: #f00;
}
.otherDirection {
    rotate: 180deg;
}
.vectorTable > .head  {
    font-weight: 600;
    text-transform: capitalize;
    text-align: center;
    display: none;
}

.velocityArrow {
    font-size: 5rem;
    color: hsl(330, 100%, 50%);
    position: absolute;
    left: 400px;
    top: 275px;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 400px;
    width: 400px;
    opacity: 0.7;
    text-align: center;
    vertical-align: middle;

}

let watch = {
    get velocityX() { return r1.velocity.x.toFixed(1) },
    get velocityY() { return r1.velocity.y.toFixed(1) },
    get positionX() { return r1.position.x.toFixed(1) },
    get positionY() { return r1.position.y.toFixed(1) },
}


const myFillRect = (ox, oy, sx, sy) => {
    cx.fillStyle = "yellowgreen"
    cx.fillRect(ox, oy + canvas.height, sx, -sy)

}


let test = {
    vector: new Vector(100, 200),
    vectors: [
        new Vector(+1, +1),
        new Vector(-1, +1),
        new Vector(-1, -1),
        new Vector(+1, -1),
    ],
    log() { for (const vector of this.vectors) { console.log(vector.angle, vector.rad, vector.deg); } }
}


  {position,size,velocity,acceleration,color}
        this.position = position;
        this.size = size;
        this.velocity = velocity;
        this.acceleration = acceleration;
        this.color = color;

<-------------------------------->
LEFT ARROW
←
U+02190
UNICODE
&#x2190;
HEX CODE
&#8592;
HTML CODE
&larr;
HTML ENTITY
\2190
<-------------------------------->
UP ARROW
↑
U+02191
UNICODE
&#x2191;
HEX CODE
&#8593;
HTML CODE
&uarr;
HTML ENTITY
\2191
<-------------------------------->
RIGHT ARROW
→
U+02192
UNICODE
&#x2192;
HEX CODE
&#8594;
HTML CODE
&rarr;
HTML ENTITY
\2192
<-------------------------------->
DOWN ARROW
↓
U+02193
UNICODE
&#x2193;
HEX CODE
&#8595;
HTML CODE
&darr;
HTML ENTITY
\2193
<-------------------------------->
LEFT RIGHT ARROW
↔
U+02194
UNICODE
&#x2194;
HEX CODE
&#8596;
HTML CODE
&harr;
HTML ENTITY
\2194
<-------------------------------->
UP DOWN ARROW
↕
U+02195
UNICODE
&#x2195;
HEX CODE
&#8597;
HTML CODE
&varr;
HTML ENTITY
\2195



rightArrow >> &#10132;   
   
            <!-- vectors -->
            <div class="head">
                <span class="name">property</span>
                <span class="vectorX">x</span>
                <span class="vectorY">y</span>
            </div>
            <div class="position">
                <span class="name">position</span>
                <span class="vectorX"></span>
                <span class="vectorY"></span>
            </div>
            <div class="totalForce">
                <span class="name">total force</span>
                <span class="vectorX"></span>
                <span class="vectorY"></span>
            </div>
            <div class="acclrtn">
                <span class="name">acceleration</span>
                <span class="vectorX"></span>
                <span class="vectorY"></span>
            </div>
            <div class="velocity">
                <span class="name">velocity</span>
                <span class="vectorX"></span>
                <span class="vectorY"></span>
            </div>
        </div>



.vectorTable::before {
    content: "Vector Table";
    display: flex;
    justify-content: space-around;
}

    keepGround() {
        // if (this.altit == 0 && this.totalForce.y > 0) { 
        //   this.veloc.y = 0; this.accel.y = 0; this.totalForce.y = 0; }
    }

    function animate() {
    anim.frame.count++
    anim.wait.isActive ? setTimeout(() => {
        window.requestAnimationFrame(animate)
    }, anim.wait) : window.requestAnimationFrame(animate)

    cube.update()
}