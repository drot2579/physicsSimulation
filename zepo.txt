<-------------------------------->
LEFT ARROW
←
U+02190
UNICODE
&#x2190;
HEX CODE
&#8592;
HTML CODE
&larr;
HTML ENTITY
\2190
<-------------------------------->
UP ARROW
↑
U+02191
UNICODE
&#x2191;
HEX CODE
&#8593;
HTML CODE
&uarr;
HTML ENTITY
\2191
<-------------------------------->
RIGHT ARROW
→
U+02192
UNICODE
&#x2192;
HEX CODE
&#8594;
HTML CODE
&rarr;
HTML ENTITY
\2192
<-------------------------------->
DOWN ARROW
↓
U+02193
UNICODE
&#x2193;
HEX CODE
&#8595;
HTML CODE
&darr;
HTML ENTITY
\2193
<-------------------------------->
LEFT RIGHT ARROW
↔
U+02194
UNICODE
&#x2194;
HEX CODE
&#8596;
HTML CODE
&harr;
HTML ENTITY
\2194
<-------------------------------->
UP DOWN ARROW
↕
U+02195
UNICODE
&#x2195;
HEX CODE
&#8597;
HTML CODE
&varr;
HTML ENTITY
\2195



rightArrow >> &#10132;   
   
            <!-- vectors -->
            <div class="head">
                <span class="name">property</span>
                <span class="valueX">x</span>
                <span class="valueY">y</span>
            </div>
            <div class="position">
                <span class="name">position</span>
                <span class="valueX"></span>
                <span class="valueY"></span>
            </div>
            <div class="totalForce">
                <span class="name">total force</span>
                <span class="valueX"></span>
                <span class="valueY"></span>
            </div>
            <div class="acclrtn">
                <span class="name">acceleration</span>
                <span class="valueX"></span>
                <span class="valueY"></span>
            </div>
            <div class="velocity">
                <span class="name">velocity</span>
                <span class="valueX"></span>
                <span class="valueY"></span>
            </div>
        </div>



.vectorTable::before {
    content: "Vector Table";
    display: flex;
    justify-content: space-around;
}

    keepGround() {
        // if (this.altit == 0 && this.totalForce.y > 0) { 
        //   this.veloc.y = 0; this.accel.y = 0; this.totalForce.y = 0; }
    }

    function animate() {
    anim.frame.count++
    anim.wait.isActive ? setTimeout(() => {
        window.requestAnimationFrame(animate)
    }, anim.wait) : window.requestAnimationFrame(animate)

    cube.update()
}